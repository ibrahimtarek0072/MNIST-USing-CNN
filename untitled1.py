# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QOj8Ro2TPbsuPa9gFX6TlDKqdg2FZmQV
"""

#libraries and package
import numpy as np
import pandas as pd
import random
import tensorflow as tf
import matplotlib.pyplot as plt

from sklearn.metrics import accuracy_score

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Conv2D, Dense, MaxPooling2D,Dropout
from tensorflow.keras.optimizers import SGD , Adam , Nadam
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import plot_model

#loading the data set from keras and normliz it
(X_train, y_train), (X_test, y_test) = mnist.load_data()
print(X_train.shape)
X_train[0].min(), X_train[0].max()
X_train = (X_train - 0.0) / (255.0 - 0.0)
X_test = (X_test - 0.0) / (255.0 - 0.0)

X_train[0].min(), X_train[0].max()

#function to print the first 20 digit of the data
def plot_digit(image, digit, plt, i):
    plt.subplot(4, 5, i + 1)
    plt.imshow(image, cmap=plt.get_cmap('gray'))
    plt.title(f"Digit: {digit}")
    plt.xticks([])
    plt.yticks([])


plt.figure(figsize=(16, 10))
for i in range(20):
    plot_digit(X_train[i], y_train[i], plt, i)
    
plt.show()

#reshaping the data into (28,28,1)
X_train = X_train.reshape((X_train.shape + (1,)))
X_test = X_test.reshape((X_test.shape + (1,)))

#creat CNN and add 2 convalution layer and 2 maxpooling 1 dropout 1 hideen layer with 100 nets output layer with 10 nets
model = Sequential([
    Conv2D(32, (3, 3), activation="linear", input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(48, (3, 3), activation="linear", input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
     Dropout(rate=0.25),
    Flatten(),
    Dense(100, activation="relu"),
    Dense(10, activation="softmax")
])

#select the optimizer fro thee CNN and the lose function 
optimizer = Adam()
model.compile(
    optimizer=optimizer, 
    loss="sparse_categorical_crossentropy", 
    metrics=["accuracy"]
)
#print the model summary and as png using keras utils
model.summary()
plot_model(model,'model.png',show_shapes=True)

#fitting the train data with 10 poch and 64 batch size
model.fit(X_train, y_train, epochs=10, batch_size=64  )

#evaluate the test data 
test=model.evaluate(X_test,y_test,verbose=0)

#print teh accurac of the model for the test data
print('test lost',test[0])
print('test accuracy',test[1])